package tasks

//Разработать программу, которая будет последовательно отправлять значения в канал,
//а с другой стороны канала — читать. По истечению N секунд программа должна завершаться.

import "time"

//Разработать программу, которая будет последовательно отправлять значения в канал,
//а с другой стороны канала — читать. По истечению N секунд программа должна завершаться.

import (
	"context"
	"fmt"
)

func Task5() {

	//Пользователь вводит N количество секунд, после которых программа остановится
	var UserTime time.Duration
	fmt.Println("Введите время для остановки программы (в секундах): ")
	fmt.Scanln(&UserTime)

	//Контекст позволяет установить время завершения программы с помощью метода WithTimeout
	ctx, _ := context.WithTimeout(context.Background(), UserTime*time.Second)

	writer := make(chan int)

	//В канал бесконечно записывается информация
	go func() {
		for {
			writer <- 1
			time.Sleep(time.Second)
		}
	}()

	//Select под циклом for позволяет выбирать case с чтением данных из канала до тех пор, пока
	//контекст спустя N секунд не считается в другой case и сработает завершение программы
	for {
		select {
		case <-ctx.Done():
			return
		case msg := <-writer:
			fmt.Println(msg)
		}
	}
}
